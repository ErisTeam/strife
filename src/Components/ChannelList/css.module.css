.category {
	& > button {
		background: linear-gradient(
			to right,
			var(--channel-category-hover-one) 33%,
			var(--channel-category-hover-two) 55%,
			var(--channel-category-hover-two) 55%
		);
		background-size: 300% 100%;
		background-position: right bottom;
		border-radius: var(--channel-category-roundness);

		transition: background-position 300ms ease-in-out;
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 0.25em 0.2em;

		width: 100%;
		& span {
			text-align: left;
			vertical-align: middle;
			color: var(--channel-category-text);

			font-size: 0.9em;
			font-weight: 600;
			height: 100%;
			width: 85%;
			padding-left: 0.5em;
		}
		& svg {
			transition: rotate 300ms;
			stroke: var(--channel-category-text);
			height: 2em;
			width: 14%;
		}
		&:hover {
			background-position: left bottom;
		}
	}
	& ol {
		transition: height 300ms ease-in-out;
		height: 0px;
		overflow: hidden;
	}
	& ol.expand {
		/* because you cant animate fit-content or auto height we need to calucate it, the formula is, (channel height+margin)*channelCount + margin    you only multiply one margin due to margin collapse*/
		height: calc(2.4em * var(--childCount) + 0.4em) !important;
		height: fit-content;
	}
}
.rotate {
	rotate: -180deg;
}
.channel {
	width: 100%;
	& button {
		display: flex;
		justify-content: flex-start;
		align-items: center;
		height: 2em;
		color: var(--channel-text-color);
		width: 100%;
		margin: 0.4em 0;
		background: linear-gradient(
			to right,
			var(--channel-gradient-hover-one) 33%,
			var(--channel-gradient-hover-two) 55%,
			var(--channel-gradient-hover-two) 55%
		);
		background-size: 300% 100%;
		background-position: right bottom;
		transition: all 300ms ease-in-out;

		border-radius: var(--round-xlarge);

		/*cant be in % or ellipsis wont work*/
		& span {
			padding-left: 0.5em;
			width: 100%;

			white-space: nowrap;
			display: inline-block;
			overflow: hidden;
			text-overflow: ellipsis;
		}
	}
	&:hover {
		button {
			background-position: left bottom;
		}
	}
}
.channelIcon {
	aspect-ratio: 1/1;
	height: 100%;
	background-color: var(--channel-icon-bgc);
	border-radius: 50%;
	display: flex;
	justify-content: center;
	align-items: center;

	vertical-align: middle;

	color: var(--channel-icon-color);
	& svg {
		height: 100%;
		background-color: transparent;
		fill: transparent;

		padding: 0.2em;
		stroke: var(--channel-icon-color);

		height: 100%;
	}
}
.list {
	height: 100%;
	& > ol {
		padding: 0 0.5em;

		overflow-y: scroll;

		scrollbar-gutter: stable;
	}
	border-bottom-left-radius: var(--round-large);
	border-top-left-radius: var(--round-large);

	background-color: var(--channel-list-bgc);

	position: relative;
}
.resize {
	height: 100%;
	width: 0.1em;

	border-right: 1px solid var(--depth4);

	top: 0;
	right: 0;
	cursor: e-resize;

	position: absolute;
}

.title {
	margin-bottom: 1em;
	position: relative;
	border-bottom: 0.125em solid var(--channel-list-separator);

	& button {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 0.6em;
		background-color: var(--channel-list-title-bgc);
		width: 100%;
		& h1 {
			text-align: center;
			font-size: 1.3em;
			color: var(--channel-list-title-text);
		}
		& svg {
			transition: rotate 300ms;
			height: 2em;
			stroke: var(--channel-list-title-icon);
			width: 14%;
		}
	}

	& ol {
		position: absolute;
		top: 2.5em;
		right: 0.5em;
		transition: height 300ms ease-in-out;
		height: calc(var(--elementCount) * 2em);
		overflow-y: hidden;
		z-index: 10;
		& li {
			padding: 0;
			margin: 0;
			button {
				height: 2em;
				padding: 0.5em;
				margin: 0;
				border: 1px solid red;
			}
		}
	}
	.folded {
		height: 0px !important;
	}
}
