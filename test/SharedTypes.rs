// @generated
// This file is @generated by prost-build.
/// if field doesnt exist in the official documentation its marked as optional
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Guild {
    #[prost(uint64, optional, tag="1")]
    pub version: ::core::option::Option<u64>,
    #[prost(message, repeated, tag="2")]
    pub threads: ::prost::alloc::vec::Vec<Channel>,
    #[prost(message, repeated, tag="3")]
    pub stickers: ::prost::alloc::vec::Vec<Sticker>,
    #[prost(message, repeated, tag="4")]
    pub stage_instances: ::prost::alloc::vec::Vec<StageInstance>,
    #[prost(message, repeated, tag="5")]
    pub roles: ::prost::alloc::vec::Vec<Role>,
    #[prost(message, optional, tag="6")]
    pub properties: ::core::option::Option<GuildProperties>,
    #[prost(uint64, optional, tag="7")]
    pub premium_subscription_count: ::core::option::Option<u64>,
    #[prost(uint64, tag="8")]
    pub member_count: u64,
    #[prost(bool, optional, tag="9")]
    pub lazy: ::core::option::Option<bool>,
    #[prost(bool, optional, tag="10")]
    pub large: ::core::option::Option<bool>,
    #[prost(string, tag="11")]
    pub joined_at: ::prost::alloc::string::String,
    #[prost(string, tag="12")]
    pub id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="13")]
    pub guild_scheduled_events: ::prost::alloc::vec::Vec<GuildScheduledEvent>,
    #[prost(message, repeated, tag="14")]
    pub emojis: ::prost::alloc::vec::Vec<Emoji>,
    #[prost(string, optional, tag="15")]
    pub data_mode: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag="16")]
    pub channels: ::prost::alloc::vec::Vec<Channel>,
    #[prost(message, optional, tag="17")]
    pub application_command_counts: ::core::option::Option<ApplicationCommandCounts>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GuildProperties {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub owner_id: ::prost::alloc::string::String,
    #[prost(string, optional, tag="3")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="4")]
    pub icon: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag="5")]
    pub name: ::prost::alloc::string::String,
    #[prost(enumeration="NsfwLevel", tag="6")]
    pub nsfw_level: i32,
    #[prost(bool, tag="7")]
    pub nsfw: bool,
    #[prost(uint64, tag="8")]
    pub explicit_content_filter: u64,
    #[prost(uint32, tag="9")]
    pub system_channel_flags: u32,
    #[prost(uint32, tag="10")]
    pub verification_level: u32,
    #[prost(uint32, tag="11")]
    pub mfa_level: u32,
    #[prost(string, tag="12")]
    pub preferred_locale: ::prost::alloc::string::String,
    #[prost(enumeration="GuildHubType", optional, tag="13")]
    pub hub_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag="14")]
    pub home_header: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="15")]
    pub rules_channel_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="16")]
    pub system_channel_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="17")]
    pub public_updates_channel_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="18")]
    pub safety_alerts_channel_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, tag="19")]
    pub afk_timeout: u64,
    #[prost(string, optional, tag="20")]
    pub afk_channel_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, tag="21")]
    pub premium_tier: u64,
    #[prost(bool, tag="22")]
    pub premium_progress_bar_enabled: bool,
    #[prost(string, optional, tag="23")]
    pub splash: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, repeated, tag="24")]
    pub features: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint64, tag="25")]
    pub default_message_notifications: u64,
    #[prost(string, optional, tag="26")]
    pub banner: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="27")]
    pub vanity_url_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="28")]
    pub latest_onboarding_question_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, tag="29")]
    pub max_video_channel_users: u64,
    #[prost(uint64, tag="30")]
    pub max_stage_video_channel_users: u64,
    #[prost(uint64, tag="31")]
    pub max_members: u64,
    #[prost(string, optional, tag="32")]
    pub application_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sticker {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, optional, tag="2")]
    pub pack_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag="3")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, optional, tag="4")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, repeated, tag="5")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, optional, tag="6")]
    pub asset: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(enumeration="StickerType", tag="7")]
    pub r#type: i32,
    #[prost(enumeration="StickerFormatType", tag="8")]
    pub format_type: i32,
    #[prost(bool, optional, tag="9")]
    pub available: ::core::option::Option<bool>,
    #[prost(string, optional, tag="10")]
    pub guild_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag="11")]
    pub user: ::core::option::Option<User>,
    #[prost(uint64, optional, tag="12")]
    pub sort_value: ::core::option::Option<u64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StageInstance {
    #[prost(string, tag="1")]
    pub channel_id: ::prost::alloc::string::String,
    #[prost(bool, tag="2")]
    pub discoverable_disabled: bool,
    #[prost(string, tag="3")]
    pub guild_id: ::prost::alloc::string::String,
    #[prost(string, optional, tag="4")]
    pub guild_scheduled_event_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag="5")]
    pub id: ::prost::alloc::string::String,
    #[prost(enumeration="StageInstancePrivacyLevel", tag="6")]
    pub privacy_level: i32,
    #[prost(string, tag="7")]
    pub topic: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Role {
    #[prost(string, optional, tag="1")]
    pub unicode_emoji: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(enumeration="RoleFlags", tag="2")]
    pub flags: i32,
    #[prost(bool, tag="3")]
    pub hoist: bool,
    #[prost(string, optional, tag="4")]
    pub icon: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag="5")]
    pub id: ::prost::alloc::string::String,
    #[prost(bool, tag="6")]
    pub managed: bool,
    #[prost(bool, tag="7")]
    pub mentionable: bool,
    #[prost(string, tag="8")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub permissions: ::prost::alloc::string::String,
    #[prost(uint64, tag="10")]
    pub position: u64,
    #[prost(message, optional, tag="11")]
    pub tags: ::core::option::Option<RoleTags>,
    #[prost(uint64, tag="12")]
    pub color: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoleTags {
    #[prost(bool, optional, tag="1")]
    pub available_for_purchase: ::core::option::Option<bool>,
    #[prost(string, optional, tag="2")]
    pub bot_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag="3")]
    pub guild_connections: ::core::option::Option<bool>,
    #[prost(string, optional, tag="4")]
    pub integration_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag="5")]
    pub premium_subscriber: ::core::option::Option<bool>,
    #[prost(string, optional, tag="6")]
    pub subscription_listing_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GuildScheduledEvent {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub guild_id: ::prost::alloc::string::String,
    #[prost(string, optional, tag="3")]
    pub channel_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="4")]
    pub creator_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag="5")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, optional, tag="6")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag="7")]
    pub scheduled_start_time: ::prost::alloc::string::String,
    #[prost(string, optional, tag="8")]
    pub scheduled_end_time: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(enumeration="StageInstancePrivacyLevel", tag="9")]
    pub privacy_level: i32,
    #[prost(enumeration="GuildScheduledEventStatus", tag="10")]
    pub status: i32,
    #[prost(enumeration="GuildScheduledEventType", tag="11")]
    pub entity_type: i32,
    #[prost(string, optional, tag="12")]
    pub entity_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag="13")]
    pub entity_metadata: ::core::option::Option<GuildScheduledEventMetadata>,
    #[prost(message, optional, tag="14")]
    pub creator: ::core::option::Option<User>,
    #[prost(uint64, optional, tag="15")]
    pub user_count: ::core::option::Option<u64>,
    #[prost(string, optional, tag="16")]
    pub image: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GuildScheduledEventMetadata {
    #[prost(string, optional, tag="1")]
    pub location: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Emoji {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, optional, tag="2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag="3")]
    pub roles: ::prost::alloc::vec::Vec<Role>,
    #[prost(message, optional, tag="4")]
    pub user: ::core::option::Option<User>,
    #[prost(bool, optional, tag="5")]
    pub require_colons: ::core::option::Option<bool>,
    #[prost(bool, optional, tag="6")]
    pub managed: ::core::option::Option<bool>,
    #[prost(bool, optional, tag="7")]
    pub animated: ::core::option::Option<bool>,
    #[prost(bool, optional, tag="8")]
    pub available: ::core::option::Option<bool>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Channel {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(enumeration="ChannelType", tag="2")]
    pub r#type: i32,
    #[prost(string, optional, tag="3")]
    pub guild_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag="4")]
    pub position: ::core::option::Option<u64>,
    #[prost(message, repeated, tag="5")]
    pub permission_overwrites: ::prost::alloc::vec::Vec<OverwriteObject>,
    #[prost(string, optional, tag="6")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="7")]
    pub topic: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag="8")]
    pub nsfw: ::core::option::Option<bool>,
    #[prost(string, optional, tag="9")]
    pub last_message_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag="10")]
    pub bitrate: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag="11")]
    pub user_limit: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag="12")]
    pub rate_limit_per_user: ::core::option::Option<u64>,
    #[prost(message, repeated, tag="13")]
    pub recipients: ::prost::alloc::vec::Vec<User>,
    #[prost(string, optional, tag="14")]
    pub icon: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="15")]
    pub owner_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="16")]
    pub application_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag="17")]
    pub managed: ::core::option::Option<bool>,
    #[prost(string, optional, tag="18")]
    pub parent_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag="19")]
    pub last_pin_timestamp: ::core::option::Option<u64>,
    #[prost(string, optional, tag="20")]
    pub rtc_region: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(enumeration="VideoQualityMode", optional, tag="21")]
    pub video_quality_mode: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag="22")]
    pub message_count: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag="23")]
    pub member_count: ::core::option::Option<u64>,
    #[prost(message, optional, tag="24")]
    pub thread_metadata: ::core::option::Option<ThreadMetadata>,
    #[prost(message, optional, tag="25")]
    pub member: ::core::option::Option<ThreadMember>,
    #[prost(uint64, optional, tag="26")]
    pub default_auto_archive_duration: ::core::option::Option<u64>,
    #[prost(string, optional, tag="27")]
    pub permissions: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag="28")]
    pub flags: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag="29")]
    pub total_message_sent: ::core::option::Option<u64>,
    #[prost(message, repeated, tag="30")]
    pub available_tags: ::prost::alloc::vec::Vec<ForumTag>,
    #[prost(string, repeated, tag="31")]
    pub applied_tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag="32")]
    pub default_reaction_emoji: ::core::option::Option<DefaultReaction>,
    #[prost(uint64, optional, tag="33")]
    pub default_thread_rate_limit_per_user: ::core::option::Option<u64>,
    #[prost(enumeration="ChannelSortOrder", optional, tag="34")]
    pub default_sort_order: ::core::option::Option<i32>,
    #[prost(enumeration="ForumLayout", optional, tag="35")]
    pub default_forum_layout: ::core::option::Option<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DefaultReaction {
    #[prost(string, optional, tag="1")]
    pub emoji_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="2")]
    pub emoji_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ForumTag {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
    #[prost(bool, tag="3")]
    pub moderated: bool,
    #[prost(string, optional, tag="4")]
    pub emoji_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="5")]
    pub emoji_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ThreadMetadata {
    #[prost(bool, tag="1")]
    pub archived: bool,
    #[prost(uint64, tag="2")]
    pub auto_archive_duration: u64,
    #[prost(uint64, tag="3")]
    pub archive_timestamp: u64,
    #[prost(bool, tag="4")]
    pub locked: bool,
    #[prost(bool, optional, tag="5")]
    pub invitable: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag="6")]
    pub create_timestamp: ::core::option::Option<u64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ThreadMember {
    #[prost(string, optional, tag="1")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="2")]
    pub user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, tag="3")]
    pub join_timestamp: u64,
    #[prost(uint64, tag="4")]
    pub flags: u64,
    #[prost(message, optional, tag="5")]
    pub member: ::core::option::Option<GuildMember>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OverwriteObject {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(enumeration="OverwriteType", tag="2")]
    pub r#type: i32,
    #[prost(string, tag="3")]
    pub allow: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub deny: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApplicationCommandCounts {
    #[prost(uint64, optional, tag="1")]
    pub messages: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag="2")]
    pub users: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag="3")]
    pub chat_inputs: ::core::option::Option<u64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct User {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub username: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub discriminator: ::prost::alloc::string::String,
    #[prost(string, optional, tag="4")]
    pub global_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="5")]
    pub avatar: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag="6")]
    pub bot: ::core::option::Option<bool>,
    #[prost(bool, optional, tag="7")]
    pub system: ::core::option::Option<bool>,
    #[prost(bool, optional, tag="8")]
    pub mfa_enabled: ::core::option::Option<bool>,
    #[prost(string, optional, tag="9")]
    pub banner: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag="10")]
    pub accent_color: ::core::option::Option<u64>,
    #[prost(string, optional, tag="11")]
    pub locale: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag="12")]
    pub verified: ::core::option::Option<bool>,
    #[prost(string, optional, tag="13")]
    pub email: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag="14")]
    pub flags: ::core::option::Option<u64>,
    #[prost(enumeration="PremiumType", optional, tag="15")]
    pub premium_type: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag="16")]
    pub public_flags: ::core::option::Option<u64>,
    #[prost(string, optional, tag="17")]
    pub avatar_decoration: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GuildMember {
    #[prost(message, optional, tag="1")]
    pub user: ::core::option::Option<User>,
    #[prost(string, optional, tag="2")]
    pub nick: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="3")]
    pub avatar: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag="4")]
    pub roles: ::prost::alloc::vec::Vec<Role>,
    #[prost(uint64, tag="5")]
    pub joined_at: u64,
    #[prost(uint64, optional, tag="6")]
    pub premium_since: ::core::option::Option<u64>,
    #[prost(bool, tag="7")]
    pub deaf: bool,
    #[prost(bool, tag="8")]
    pub mute: bool,
    #[prost(uint64, tag="9")]
    pub flags: u64,
    #[prost(bool, optional, tag="10")]
    pub pending: ::core::option::Option<bool>,
    #[prost(string, optional, tag="11")]
    pub permissions: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag="12")]
    pub communication_disabled_until: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum NsfwLevel {
    NsfwDefault = 0,
    Explicit = 1,
    Safe = 2,
    AgeRestricted = 3,
}
impl NsfwLevel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            NsfwLevel::NsfwDefault => "NSFW_DEFAULT",
            NsfwLevel::Explicit => "EXPLICIT",
            NsfwLevel::Safe => "SAFE",
            NsfwLevel::AgeRestricted => "AGE_RESTRICTED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NSFW_DEFAULT" => Some(Self::NsfwDefault),
            "EXPLICIT" => Some(Self::Explicit),
            "SAFE" => Some(Self::Safe),
            "AGE_RESTRICTED" => Some(Self::AgeRestricted),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GuildHubType {
    GuildDefault = 0,
    HighSchool = 1,
    College = 2,
}
impl GuildHubType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            GuildHubType::GuildDefault => "GUILD_DEFAULT",
            GuildHubType::HighSchool => "HIGH_SCHOOL",
            GuildHubType::College => "COLLEGE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GUILD_DEFAULT" => Some(Self::GuildDefault),
            "HIGH_SCHOOL" => Some(Self::HighSchool),
            "COLLEGE" => Some(Self::College),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum StageInstancePrivacyLevel {
    Public = 0,
    StageGuildOnly = 1,
}
impl StageInstancePrivacyLevel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            StageInstancePrivacyLevel::Public => "PUBLIC",
            StageInstancePrivacyLevel::StageGuildOnly => "STAGE_GUILD_ONLY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PUBLIC" => Some(Self::Public),
            "STAGE_GUILD_ONLY" => Some(Self::StageGuildOnly),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RoleFlags {
    InPrompt = 0,
}
impl RoleFlags {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            RoleFlags::InPrompt => "IN_PROMPT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "IN_PROMPT" => Some(Self::InPrompt),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GuildScheduledEventPrivacyLevel {
    GuildOnly = 0,
}
impl GuildScheduledEventPrivacyLevel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            GuildScheduledEventPrivacyLevel::GuildOnly => "GUILD_ONLY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GUILD_ONLY" => Some(Self::GuildOnly),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GuildScheduledEventStatus {
    Scheduled = 0,
    Active = 1,
    Completed = 2,
    Canceled = 3,
}
impl GuildScheduledEventStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            GuildScheduledEventStatus::Scheduled => "SCHEDULED",
            GuildScheduledEventStatus::Active => "ACTIVE",
            GuildScheduledEventStatus::Completed => "COMPLETED",
            GuildScheduledEventStatus::Canceled => "CANCELED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SCHEDULED" => Some(Self::Scheduled),
            "ACTIVE" => Some(Self::Active),
            "COMPLETED" => Some(Self::Completed),
            "CANCELED" => Some(Self::Canceled),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GuildScheduledEventType {
    StageInstance = 0,
    Voice = 1,
    External = 2,
}
impl GuildScheduledEventType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            GuildScheduledEventType::StageInstance => "STAGE_INSTANCE",
            GuildScheduledEventType::Voice => "VOICE",
            GuildScheduledEventType::External => "EXTERNAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STAGE_INSTANCE" => Some(Self::StageInstance),
            "VOICE" => Some(Self::Voice),
            "EXTERNAL" => Some(Self::External),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChannelSortOrder {
    LatestActivity = 0,
    CreationDate = 1,
}
impl ChannelSortOrder {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ChannelSortOrder::LatestActivity => "LATEST_ACTIVITY",
            ChannelSortOrder::CreationDate => "CREATION_DATE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LATEST_ACTIVITY" => Some(Self::LatestActivity),
            "CREATION_DATE" => Some(Self::CreationDate),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ForumLayout {
    NotSet = 0,
    ListView = 1,
    GalleryView = 2,
}
impl ForumLayout {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ForumLayout::NotSet => "NOT_SET",
            ForumLayout::ListView => "LIST_VIEW",
            ForumLayout::GalleryView => "GALLERY_VIEW",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NOT_SET" => Some(Self::NotSet),
            "LIST_VIEW" => Some(Self::ListView),
            "GALLERY_VIEW" => Some(Self::GalleryView),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChannelType {
    GuildText = 0,
    GuildVoice = 1,
    GroupDm = 2,
    GuildCategory = 3,
    GuildAnnouncement = 4,
    AnnouncementThread = 5,
    PublicThread = 10,
    PrivateThread = 11,
    GuildStageVoice = 12,
    GuildDirectory = 13,
    GuildForum = 14,
    GuildMedia = 15,
}
impl ChannelType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ChannelType::GuildText => "GUILD_TEXT",
            ChannelType::GuildVoice => "GUILD_VOICE",
            ChannelType::GroupDm => "GROUP_DM",
            ChannelType::GuildCategory => "GUILD_CATEGORY",
            ChannelType::GuildAnnouncement => "GUILD_ANNOUNCEMENT",
            ChannelType::AnnouncementThread => "ANNOUNCEMENT_THREAD",
            ChannelType::PublicThread => "PUBLIC_THREAD",
            ChannelType::PrivateThread => "PRIVATE_THREAD",
            ChannelType::GuildStageVoice => "GUILD_STAGE_VOICE",
            ChannelType::GuildDirectory => "GUILD_DIRECTORY",
            ChannelType::GuildForum => "GUILD_FORUM",
            ChannelType::GuildMedia => "GUILD_MEDIA",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GUILD_TEXT" => Some(Self::GuildText),
            "GUILD_VOICE" => Some(Self::GuildVoice),
            "GROUP_DM" => Some(Self::GroupDm),
            "GUILD_CATEGORY" => Some(Self::GuildCategory),
            "GUILD_ANNOUNCEMENT" => Some(Self::GuildAnnouncement),
            "ANNOUNCEMENT_THREAD" => Some(Self::AnnouncementThread),
            "PUBLIC_THREAD" => Some(Self::PublicThread),
            "PRIVATE_THREAD" => Some(Self::PrivateThread),
            "GUILD_STAGE_VOICE" => Some(Self::GuildStageVoice),
            "GUILD_DIRECTORY" => Some(Self::GuildDirectory),
            "GUILD_FORUM" => Some(Self::GuildForum),
            "GUILD_MEDIA" => Some(Self::GuildMedia),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum VideoQualityMode {
    Auto = 0,
    Full = 1,
}
impl VideoQualityMode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            VideoQualityMode::Auto => "AUTO",
            VideoQualityMode::Full => "FULL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AUTO" => Some(Self::Auto),
            "FULL" => Some(Self::Full),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OverwriteType {
    Role = 0,
    Member = 1,
}
impl OverwriteType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            OverwriteType::Role => "ROLE",
            OverwriteType::Member => "MEMBER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROLE" => Some(Self::Role),
            "MEMBER" => Some(Self::Member),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ApplicationComandTypes {
    ChatInput = 0,
    User = 1,
    Message = 2,
}
impl ApplicationComandTypes {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ApplicationComandTypes::ChatInput => "CHAT_INPUT",
            ApplicationComandTypes::User => "USER",
            ApplicationComandTypes::Message => "MESSAGE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHAT_INPUT" => Some(Self::ChatInput),
            "USER" => Some(Self::User),
            "MESSAGE" => Some(Self::Message),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum StickerType {
    Standard = 0,
    Guild = 1,
}
impl StickerType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            StickerType::Standard => "STANDARD",
            StickerType::Guild => "GUILD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STANDARD" => Some(Self::Standard),
            "GUILD" => Some(Self::Guild),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum StickerFormatType {
    Png = 0,
    Apng = 1,
    LotTie = 2,
    Gif = 3,
}
impl StickerFormatType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            StickerFormatType::Png => "PNG",
            StickerFormatType::Apng => "APNG",
            StickerFormatType::LotTie => "LOTTie",
            StickerFormatType::Gif => "GIF",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PNG" => Some(Self::Png),
            "APNG" => Some(Self::Apng),
            "LOTTie" => Some(Self::LotTie),
            "GIF" => Some(Self::Gif),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PremiumType {
    None = 0,
    NitroClassic = 1,
    Nitro = 2,
    NitroBasic = 3,
}
impl PremiumType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            PremiumType::None => "NONE",
            PremiumType::NitroClassic => "NITRO_CLASSIC",
            PremiumType::Nitro => "NITRO",
            PremiumType::NitroBasic => "NITRO_BASIC",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NONE" => Some(Self::None),
            "NITRO_CLASSIC" => Some(Self::NitroClassic),
            "NITRO" => Some(Self::Nitro),
            "NITRO_BASIC" => Some(Self::NitroBasic),
            _ => None,
        }
    }
}
// @@protoc_insertion_point(module)
